openssl genrsa -out ./generated/rootCAkey.pem 2048

openssl req -x509 -new -nodes \
  -key ./generated/rootCAkey.pem \
  -days 3650 \
  -out ./generated/cacerts.pem \
  -subj "/C=US/ST=CA/L=MVT/O=TestOrg/OU=Cloud/CN=TestCA"

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/zookeeper-server-domain.json | cfssljson -bare ./generated/zookeeper-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/kafka-server-domain.json | cfssljson -bare ./generated/kafka-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/controlcenter-server-domain.json | cfssljson -bare ./generated/controlcenter-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/schemaregistry-server-domain.json | cfssljson -bare ./generated/schemaregistry-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/connect-server-domain.json | cfssljson -bare ./generated/connect-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/ksqldb-server-domain.json | cfssljson -bare ./generated/ksqldb-server

cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/kafkarestproxy-server-domain.json | cfssljson -bare ./generated/kafkarestproxy-server


kubectl create secret generic tls-zookeeper --from-file=fullchain.pem=./generated/zookeeper-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/zookeeper-server-key.pem --namespace confluent

kubectl create secret generic tls-kafka --from-file=fullchain.pem=./generated/kafka-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/kafka-server-key.pem --namespace confluent

kubectl create secret generic tls-controlcenter --from-file=fullchain.pem=./generated/controlcenter-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/controlcenter-server-key.pem --namespace confluent

kubectl create secret generic tls-schemaregistry --from-file=fullchain.pem=./generated/schemaregistry-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/schemaregistry-server-key.pem --namespace confluent

kubectl create secret generic tls-connect --from-file=fullchain.pem=./generated/connect-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/connect-server-key.pem --namespace confluent

kubectl create secret generic tls-ksqldb --from-file=fullchain.pem=./generated/ksqldb-server.pem --from-file=cacerts.pem=./generated/cacerts.pem --from-file=privkey.pem=./generated/ksqldb-server-key.pem --namespace confluent


kubectl create secret generic credential \
  --from-file=ldap.txt=../credentials/ldap.txt \
  --namespace confluent

kubectl create secret generic mds-token \
  --from-file=mdsPublicKey.pem=../mds/mds-publickey.txt \
  --from-file=mdsTokenKeyPair.pem=../mds/mds-tokenkeypair.txt \
  --namespace confluent

  kubectl create secret generic mds-client \
    --from-file=bearer.txt=../mds/kafka-client.txt \
    --namespace confluent

  kubectl create secret generic c3-mds-client \
    --from-file=bearer.txt=../mds/c3-mds-client.txt \
    --namespace confluent

  kubectl create secret generic connect-mds-client \
    --from-file=bearer.txt=../mds/connect-mds-client.txt \
    --namespace confluent

  kubectl create secret generic sr-mds-client \
    --from-file=bearer.txt=../mds/sr-mds-client.txt \
    --namespace confluent

  kubectl create secret generic ksqldb-mds-client \
    --from-file=bearer.txt=../mds/ksqldb-mds-client.txt \
    --namespace confluent

  kubectl create secret generic rest-credential \
    --from-file=bearer.txt=../mds/kafka-client.txt \
    --from-file=basic.txt=../mds/kafka-client.txt \
    --namespace confluent

  kubectl create secret generic telemetry-auth --from-file=telemetry.txt=../credentials/telemetry.txt

  kubectl create secret generic aws-secret --from-file=aws-creds=../credentials/aws-creds.txt

  #to make a truststore locally for client TLS connections (like ksqldb cli)
  keytool -import -alias trustore -file cacerts.pem -keystore truststore.p12 -storetype PKCS12 -storepass mystorepassword

  #to make a keystore locally for client TLS connections (like kafka command line client)
  cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/testadmin-domain.json | cfssljson -bare ./generated/testadmin
  cfssl gencert -ca=./generated/cacerts.pem -ca-key=./generated/rootCAkey.pem -config=./configs/ca-config.json -profile=server ./configs/fakeuser-domain.json | cfssljson -bare ./generated/fakeuser
  openssl pkcs12 -export -out keystore-testadmin.p12 -in testadmin.pem -inkey testadmin-key.pem -CAfile cacerts.pem -chain -name testadmin
  openssl pkcs12 -export -out keystore-fakeuser.p12 -in fakeuser.pem -inkey fakeuser-key.pem -CAfile cacerts.pem -chain -name fakeuser
