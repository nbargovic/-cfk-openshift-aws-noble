apiVersion: platform.confluent.io/v1beta1
kind: Zookeeper
metadata:
  name: zookeeper
  namespace: confluent
spec:
  replicas: 3
  image:
    application: confluentinc/cp-zookeeper:7.6.0-2-ubi8.arm64
    init: confluentinc/confluent-init-container:2.8.0.arm64
  dataVolumeCapacity: 10Gi
  logVolumeCapacity: 5Gi
  authentication:
    type: mtls
    principalMappingRules:
      - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
  tls:
    secretRef: tls-zookeeper
  configOverrides:
    jvm:
      - "-Dcom.sun.management.jmxremote=false"
  podTemplate:
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
    podSecurityContext:
      runAsUser: 0
    labels:
      pod-group: zookeeper
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: zookeeper
  license:
    globalLicense: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: confluent
spec:
  replicas: 3
  image:
    application: confluentinc/cp-server:7.6.0-2-ubi8.arm64
    init: confluentinc/confluent-init-container:2.8.0.arm64
  dataVolumeCapacity: 25Gi
  mountedSecrets:
    - secretRef: aws-secret
  configOverrides:
    server:
      - "log.retention.hours=72"
      - "log.roll.hours=71"
      - "log.segment.bytes=209715200"
      - "confluent.support.metrics.enable=false"
      - "confluent.tier.feature=false"
      - "confluent.tier.enable=false"
      - "confluent.tier.backend=S3"
      - "confluent.tier.s3.bucket=nbargovic-tiered-storage-os"
      - "confluent.tier.s3.region=us-east-1"
      - "confluent.tier.s3.cred.file.path=/mnt/secrets/aws-secret/aws-creds.txt"
      - "confluent.metadata.enable.server.urls.refresh=false"
      - "kafka.rest.confluent.metadata.enable.server.urls.refresh=false"
  tls:
    secretRef: tls-kafka
  listeners:
    internal:
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
      tls:
        enabled: true
    external:
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
      tls:
        enabled: true
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: fios-router.home
  authorization:
    type: rbac
    superUsers:
      - User:kafka
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        type: ldap
        ldap:
          address: ldap://ldap.ldap.svc.cluster.local:9389
          authentication:
            type: simple
            simple:
              secretRef: credential
          configurations:
            groupNameAttribute: cn
            groupObjectClass: posixGroup
            groupMemberAttribute: memberUid
            groupMemberAttributePattern: cn=(.*),ou=users,dc=test,dc=com
            groupSearchBase: dc=test,dc=com
            groupSearchScope: 2
            userNameAttribute: cn
            userMemberOfAttributePattern: cn=(.*),dc=test,dc=com
            userObjectClass: simpleSecurityObject
            userSearchBase: dc=test,dc=com
            userSearchScope: 2
  dependencies:
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          secretRef: mds-client
    zookeeper:
      endpoint: zookeeper.confluent.svc.cluster.local:2182
      authentication:
        type: mtls
      tls:
        enabled: true
  podTemplate:
    resources:
      limits:
        memory: 2Gi
        cpu: 2
    probe:
      readiness:
        initialDelaySeconds: 360
      liveness:
        initialDelaySeconds: 360
    podSecurityContext:
      runAsUser: 0
    labels:
      pod-group: kafka
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: kafka
  license:
    globalLicense: true
# metrics:
  # prometheus:
    # whitelist:
    # blacklist:
    # rules:
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: confluent
spec:
  kafkaRest:
    authentication:
      type: bearer
      bearer:
        secretRef: rest-credential
